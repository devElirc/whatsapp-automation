ADPOWER_API_KEY=45a90ccf963344edf5e146a9da52ff28
# PROXY=http:brd.superproxy.io:33335:brd-customer-hl_6b54ee0c-zone-mobile_proxy1:ou6j12v27k7d
PROXY=socks5h://9obLCuIUEK8B7EUc:0SYBFfVZ7A372u46@geo.g-w.info:10800



#  curl -x http://brd-customer-hl_6b54ee0c-zone-mobile_proxy1:ou6j12v27k7d@brd.superproxy.io:33335 https://web.whatsapp.com -I


EXECUTIONS_MODE=queue
EXECUTIONS_PROCESS=multi
QUEUE_MODE=redis
QUEUE_BULL_REDIS_HOST=127.0.0.1
QUEUE_BULL_REDIS_PORT=6379




// 1. Get WhatsApp profiles from AdsPower
const profiles = $items("Get Profiles")[0].json.data.list;

// 2. Get leads from your parsed CSV node
const leads = $items("Extract from File");

// 3. Get the message template from Webhook node
const template = $node["Webhook"].json["body"]["message"];

// 4. Function to apply the template dynamically
function renderMessage(lead, tpl) {
  return tpl.replace(/{(.*?)}/g, (_, key) => lead[key.trim()] || "");
}

// 5. Initialize profile assignments
const assignments = profiles.map(p => ({
  profile: p,
  leads: []
}));

// 6. Assign leads randomly & apply message template
for (const leadNode of leads) {
  const lead = leadNode.json;
  lead.message = renderMessage(lead, template);

  const random = Math.floor(Math.random() * assignments.length);
  assignments[random].leads.push(lead);
}

// 7. Return final assignments
return assignments
  .filter(a => a.leads.length > 0)
  .map(a => ({
    json: {
      profile_id: a.profile.user_id,
      profile_name: a.profile.name,
      ws: a.profile.ws, // optional
      leads: a.leads
    }
  }));
